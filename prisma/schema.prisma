// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  SELLER
  CUSTOMER
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              UserRole  @default(CUSTOMER)
   accounts          Account[]
  isTwoFactorEnabled Boolean   @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  vendorDetails     VendorDetails? // Vendor details for sellers

// Relationships
  products          Product[]   // Products listed by the user (if seller)
  orders            Order[]     // Orders placed by the user (if customer)
  reviews           Review[]    // Reviews given by the user
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


model VendorDetails {
  id        String  @id @default(cuid())
  userId    String  @unique
  latitude  Float?
  longitude Float?

  // Relationships
  user      User    @relation(fields: [userId], references: [id])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  image       String?
  vendorId    String   // ID of the seller
  createdAt   DateTime @default(now())

  // Relationships
  vendor      User     @relation(fields: [vendorId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  orders      Order[]
  reviews     Review[]
}


model Order {
  id         String    @id @default(cuid())
  customerId String
  productId  String
  quantity   Int
  totalPrice Float
  createdAt  DateTime @default(now())

  // Relationships
  customer   User      @relation(fields: [customerId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])
  
}

model Review {
  id         String    @id @default(cuid())
  productId  String
  userId     String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())

  // Relationships
  product    Product   @relation(fields: [productId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  products    Product[]
}






